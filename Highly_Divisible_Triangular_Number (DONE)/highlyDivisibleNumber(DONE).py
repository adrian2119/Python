# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?



target = 123 # upper limit gone upto 8200
triangular = []
naturalDivisors = []
i = 0
j = 0

while i < target:
	j = j + i
	triangular.append(j)
	naturalDivisors.append(0)
	i = i + 1

j = 1
# higest number supported by Int is
# 4611686018427387904

# set between 12000 - 12170
i = 0 # index of triangular value to be tested (highest so far is 9307)

while i in range(len(triangular)):
	divisor = [0]
	while j * j <= triangular[i]: # split it half recursively
		# remainder = triangular[i] % j
		# result = triangular[i] / j
		# if (remainder == 0):
		if triangular[i] % j == 0:
			divisor.append(j)
		j = j + 1
	print(i, j, triangular[i], len(divisor), (len(divisor) * 2))
	# print(i)

	j = 1
	i = i + 1

# if (divisor.count >= lookingFor):
#     lookingFor = divisor.count
#     print(triangular[i], naturalDivisors[i], naturalDivisors.index(of: lookingFor))
#     break;
# print(triangular)
# print(naturalDivisors)
# print(naturalDivisors.max()!,naturalDivisors.index(of: naturalDivisors.max()!)!)


